<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:jacoco="antlib:org.jacoco.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle.ant">
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="jar.dir" value="${build.dir}/jar" />
	<property name="dependencies.dir" value="${build.dir}/builddependencies" />
	<property name="jar.filename" value="${ant.project.name}.jar" />
	<property name="jar.filename.withsource" value="${ant.project.name}_withsource.jar" />
	<property name="test.classes.dir" value="${build.dir}/classes-tests" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="reports.dir" value="${build.dir}/reports" />
	<property name="reports.xml.dir" value="${reports.dir}/xml" />
	<property name="reports.html.dir" value="${reports.dir}/html" />
	<property name="workspace.snapshot.dir" value="${build.dir}/workspacesnapshot/" />
	<property name="jenkins.location" value="http://jenkins.sse.uni-hildesheim.de/job" />

	<!-- Public Plug-ins & Core -->
	<property name="infrastructure.location" value="${jenkins.location}/KernelHaven_Infrastructure/lastSuccessfulBuild/artifact/build/jar/KernelHaven_fortesting.jar" />
	<property name="infrastructure.location.core_src" value="${jenkins.location}/KernelHaven_Infrastructure/lastSuccessfulBuild/artifact/build/jar/KernelHaven_withsource.jar" />
	<property name="CnfUtils.location" value="${jenkins.location}/KernelHaven_CnfUtils/lastStableBuild/artifact/build/jar/CnfUtils.jar" />
	<property name="CnfUtils.location_src" value="${jenkins.location}/KernelHaven_CnfUtils/lastStableBuild/artifact/build/jar/CnfUtils_withsource.jar" />
	<property name="TypeChef.location" value="${jenkins.location}/KernelHaven_TypeChefExtractor/lastSuccessfulBuild/artifact/build/jar/TypeChefExtractor.jar" />
	<property name="TypeChef.location_src" value="${jenkins.location}/KernelHaven_TypeChefExtractor/lastSuccessfulBuild/artifact/build/jar/TypeChefExtractor_withsource.jar" />
	<property name="Undertaker.location" value="${jenkins.location}/KernelHaven_UndertakerExtractor/lastSuccessfulBuild/artifact/build/jar/UndertakerExtractor.jar" />
	<property name="Undertaker.location_src" value="${jenkins.location}/KernelHaven_UndertakerExtractor/lastSuccessfulBuild/artifact/build/jar/UndertakerExtractor_withsource.jar" />
	<property name="srcML.location_src" value="${jenkins.location}/KernelHaven_SrcMlExtractor/lastSuccessfulBuild/artifact/build/jar/SrcMLExtractor_withsource.jar" />
	<property name="featureEffectAnalysis.location" value="${jenkins.location}/KernelHaven_FeatureEffectAnalysis/lastSuccessfulBuild/artifact/build/jar/FeatureEffectAnalysis.jar" />
	<property name="FeatureEffectAnalysis.location_src" value="${jenkins.location}/KernelHaven_FeatureEffectAnalysis/lastSuccessfulBuild/artifact/build/jar/FeatureEffectAnalysis_withsource.jar" />
	<property name="IOUtils.location" value="${jenkins.location}/KernelHaven_IOUtils/lastSuccessfulBuild/artifact/build/jar/IOUtils.jar" />
	<property name="IOUtils.location_src" value="${jenkins.location}/KernelHaven_IOUtils/lastSuccessfulBuild/artifact/build/jar/IOUtils_withsource.jar" />
	<property name="UnDeadAnalyzer.location_src" value="${jenkins.location}/KernelHaven_UnDeadAnalyzer/lastSuccessfulBuild/artifact/build/jar/defaultanalyses_withsource.jar" />
	<property name="MetricHaven.location_src" value="${jenkins.location}/KernelHaven_MetricHaven/lastSuccessfulBuild/artifact/build/jar/MetricHaven_withsource.jar" />
	<property name="KconfigReaderExtractor.location_src" value="${jenkins.location}/KernelHaven_KconfigReaderExtractor/lastSuccessfulBuild/artifact/build/jar/KconfigReaderExtractor_withsource.jar" />
	<property name="KbuildMinerExtractor.location_src" value="${jenkins.location}/KernelHaven_KbuildMinerExtractor/lastSuccessfulBuild/artifact/build/jar/KbuildminerExtractor_withsource.jar" />
	<property name="NonBooleanUtils.location" value="${jenkins.location}/KernelHaven_NonBooleanUtils/lastSuccessfulBuild/artifact/build/jar/NonBooleanUtils.jar" />
	<property name="NonBooleanUtils.location_src" value="${jenkins.location}/KernelHaven_NonBooleanUtils/lastSuccessfulBuild/artifact/build/jar/NonBooleanUtils_withsource.jar" />

	<!-- Modules that build -->
	<property name="src.dir" value="${basedir}/src" />
	<property name="test.dir" value="${basedir}/test" />
	<property name="res.dir" value="${basedir}/res" />

	<path id="classpath.project">
		<fileset dir="${lib.dir}" />
		<fileset dir="${dependencies.dir}" />
		<pathelement location="${classes.dir}" />
	</path>

	<!-- 
	  Requires that the contents of http://projects.sse.uni-hildesheim.de/tools/ant-lib.zip
	  is copied and placed at <user_home>/.ant/lib
	  To execute this script from Eclipse, Eclipse requires that this folder is also specified at:
	  Window -> Preferences -> ANT -> Runtime -> Add External Folder
	-->
	<path id="classpath.testing">
		<fileset dir="${lib.dir}" />
		<!-- Loads Junit from ANT installation folder -->
		<fileset dir="${user.home}/.ant/lib">
			<include name="junit*.jar" />
			<include name="hamcrest*.jar" />
		</fileset>
		<!--
		  Classes of plug-in should be loaded before the infrastructure.
		  This is done as a plug-in may uses the same qualified name for the test suite.
		-->
		<pathelement location="${test.classes.dir}" />
		<fileset dir="${dependencies.dir}" />
	</path>

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" />

	<tstamp>
		<format property="TS_FOR_VERSION_FILE" pattern="HH:mm:ss dd.MM.yyyy" locale="en,US" />
	</tstamp>

	<!-- Target to create folder structure for releases, requires argument: base.kh.folder -->
	<target name="kh.folder.structure">
		<delete dir="${base.kh.folder}" />
		<mkdir dir="${base.kh.folder}" />
		<mkdir dir="${base.kh.folder}/plugins" />
		<mkdir dir="${base.kh.folder}/output" />
		<mkdir dir="${base.kh.folder}/res" />
		<mkdir dir="${base.kh.folder}/log" />
		<mkdir dir="${base.kh.folder}/cache" />

		<echo file="${base.kh.folder}/version.txt" append="false">Release of ${TS_FOR_VERSION_FILE}</echo>
	</target>

	<target name="jar">
		<jar destfile="${jar.dir}/${jar.filename}" duplicate="preserve">
			<fileset dir="${classes.dir}" excludes="**/package-info.class" />
			<fileset dir="${res.dir}" excludes="**/package-info.java" erroronmissingdir="false" />
				
			<!-- Automatically inclued all libraries from lib/include folder -->
			<zipgroupfileset dir="${lib.dir}/include" includes="*.jar" erroronmissingdir="false" />
		</jar>
	</target>

	<target name="jarwithsources">
		<jar destfile="${jar.dir}/${jar.filename.withsource}" duplicate="preserve">
			<fileset dir="${classes.dir}" excludes="**/package-info.class" />
			<fileset dir="${src.dir}" excludes="**/package-info.java" />
			<fileset dir="${res.dir}" excludes="**/package-info.java" erroronmissingdir="false" />

			<!-- Automatically inclued all libraries from lib/include folder -->
			<zipgroupfileset dir="${lib.dir}/include" includes="*.jar" erroronmissingdir="false" />
		</jar>
	</target>


	<target name="prepare.folders">
		<delete dir="${build.dir}" />

		<mkdir dir="${lib.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${dependencies.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
	</target>

	<target name="compile">
		<!-- compile java-classes -->
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes" includeantruntime="false">
			<classpath refid="classpath.project" />
		</javac>

		<!-- copy resources for java-classes -->
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="test">
		<mkdir dir="${test.classes.dir}" />
		<javac destdir="${test.classes.dir}" debug="yes" includeantruntime="false">
			<src path="${src.dir}" />
			<src path="${test.dir}" />
			<classpath refid="classpath.testing" />
		</javac>

		<!-- Copy testdata, otherwise they won't be found during the test execution -->
		<copy todir="${test.classes.dir}/testdata">
			<fileset dir="testdata" />
		</copy>

		<!-- Copy resources -->
		<copy todir="${test.classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="${res.dir}" erroronmissingdir="false" >
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="${test.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<jacoco:coverage destfile="${reports.dir}/jacoco.exec">
			<junit fork="yes" dir="${test.classes.dir}" failureProperty="test.failed">
				<sysproperty key="KH.ANT.Test.Execution" value="true"/>
				<!-- Note the classpath order: instrumented classes are before the original 
                  (uninstrumented) classes. This is important. -->
				<classpath refid="classpath.testing" />

				<formatter type="xml" />
				<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
				<batchtest todir="${reports.xml.dir}" unless="testcase">
					<!-- include all Tests -->
					<fileset dir="${test.dir}">
						<include name="**/AllTests.java" />
					</fileset>

					<!-- include all resources from the src-package-folders -->
					<fileset dir="${src.dir}">
						<exclude name="**/*.java" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<!-- JUnit Report in HTML -->
		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<!-- Clean-up after testing to reduce required diskapce for archiving results on Jenkins.
	     Must be called after JAR creation, bevore creating Jacoco results (or at least before Jenkins will publish them. -->
	<target name="cleanup">
		<delete failonerror="false">
		      <fileset dir="${classes.dir}">
		        <include name="**/*.zip"/>
		        <include name="**/*.jar"/>
		        <include name="**/*.c"/>
		      	<include name="**/pilztaker"/>
		      </fileset>
		      <fileset dir="${test.classes.dir}">
		        <include name="**/*.zip"/>
		      	<include name="**/*.jar"/>
		      	<include name="**/*.c"/>
		      	<include name="**/pilztaker"/>
		      </fileset>
		      <!-- Attention: Please do not commit (Jenkins won't commit anything) -->
		      <fileset dir="${res.dir}">
		        <include name="**/*.zip"/>
		      	<include name="**/*.jar"/>
		      	<include name="**/*.c"/>
		      	<include name="**/pilztaker"/>
		      </fileset>
	    </delete>
  </target>
	
	<target name="check">

		<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" />

		<checkstyle config="${basedir}/checkstyle.xml" failOnViolation="false">
			<fileset dir="${src.dir}" includes="**/*.java" />
			<formatter type="plain" />
			<formatter type="xml" toFile="build/reports/xml/checkstyle_errors.xml" />
		</checkstyle>
	</target>

	<target name="jacoco_report">
		<antcall target="KH_Common.cleanup"/>
		<jacoco:report>
			<executiondata>
				<file file="${reports.dir}/jacoco.exec" />
			</executiondata>

			<structure name="${ant.project.name}">
				<classfiles>
					<fileset dir="${build.dir}/classes" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>

			<!-- html destdir="${reports.dir}/html" /-->
		</jacoco:report>
	</target>

	<target name="zip_workspace">
		<zip destfile="${workspace.snapshot.dir}/${ant.project.name}.zip" basedir="${basedir}" excludes="jacoco.exec, build/**" />
	</target>

</project>